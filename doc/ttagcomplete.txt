*ttagcomplete.txt*  Context-sensitive tags-based completion and code skeletons
                    Author: Thomas Link, micathom at gmail com

Basically, this plugin provides a framework for context-sensitive 
tags-based completion and code skeletons (requires tSkeleton vimscript 
#1160). I.e. the completion function check the context and filter the 
available tags accordingly.

In practice, the context sensitivity is currently only implemented for 
Java and requires a tags file for the JDK sources to be created (see the 
notes on |tlib#tag#Retrieve()| for details).

It shouldn't be too difficult to adapt this for other statically typed 
languages with formal variable declarations. As the source code isn't 
actually parsed or anything, there is little chance to use this 
efficiently with dynamically typed languages like ruby where the 
type/class is only known at run-time.


-----------------------------------------------------------------------
Install~

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0, 
please make sure, you have the current version of vimball (vimscript 
#1502) installed.

This script requires tlib (vimscript #1863) to be installed.

For code skeletons, you also need tSkeletons (vimscript #1160).

Suggested setup for java (best set in ~/vimfiles/after/ftplugin/java.vim): >

    " See notes on |tlib#tag#Retrieve()|.
    let b:tlib_tags_extra = $JAVA_HOME .'/tags0'

    let b:ttagcomplete_collect='ttagcomplete#Java'

    " Call |ttagcomplete#On()| and set 'omnifunc'.
    TTagCompleteOn

    " For code skeletons, use this:
    if exists('g:loaded_tskeleton') && g:loaded_tskeleton >= 402
        noremap <buffer> <c-x><c-g> :call ttagcomplete#CompleteSkeletons('m')<cr>
        inoremap <buffer> <c-x><c-g> <c-\><c-o>:call ttagcomplete#CompleteSkeletons('m')<cr>
    endif


------------------------------------------------------------------------
Contents~

    plugin/ttagcomplete.vim
        g:ttagcomplete_constraints ......... |g:ttagcomplete_constraints|
        g:ttagecho_use_extra ............... |g:ttagecho_use_extra|
        g:ttagecho_min_chars ............... |g:ttagecho_min_chars|
        :TTagCompleteOn .................... |:TTagCompleteOn|
        :TTagCompleteOff ................... |:TTagCompleteOff|
    autoload/ttagcomplete.vim
        ttagcomplete#On .................... |ttagcomplete#On()|
        ttagcomplete#Off ................... |ttagcomplete#Off()|
        ttagcomplete#CompleteSkeletons ..... |ttagcomplete#CompleteSkeletons()|
        ttagcomplete#Complete .............. |ttagcomplete#Complete()|
        ttagcomplete#Java .................. |ttagcomplete#Java()|
        ttagcomplete#FindJavaClass ......... |ttagcomplete#FindJavaClass()|
        ttagcomplete#FindJavaClassInTags ... |ttagcomplete#FindJavaClassInTags()|


------------------------------------------------------------------------
plugin/ttagcomplete.vim~

                                                    *g:ttagcomplete_constraints*
g:ttagcomplete_constraints     (default: {})
    A dictionnary of constraints that tags have to satisfy.

                                                    *g:ttagecho_use_extra*
g:ttagecho_use_extra           (default: 1)
    If true, use extra tags (see |g:tlib_tags_extra|).

                                                    *g:ttagecho_min_chars*
g:ttagecho_min_chars           (default: 1)
    Number of chars, the user has to type before we allow invoking the 
    completion. If you set this to 0, it's possible that all tags will be 
    returned.

                                                    *:TTagCompleteOn*
:TTagCompleteOn

                                                    *:TTagCompleteOff*
:TTagCompleteOff


------------------------------------------------------------------------
autoload/ttagcomplete.vim~

                                                    *ttagcomplete#On()*
ttagcomplete#On
    function! ttagcomplete#On(?option="omni")
    If option is "complete", set 'completefunc' instead of 'omnifunc' (the 
    default).

                                                    *ttagcomplete#Off()*
ttagcomplete#Off

                                                    *ttagcomplete#CompleteSkeletons()*
ttagcomplete#CompleteSkeletons

                                                    *ttagcomplete#Complete()*
ttagcomplete#Complete

                                                    *ttagcomplete#Java()*
ttagcomplete#Java

                                                    *ttagcomplete#FindJavaClass()*
ttagcomplete#FindJavaClass

                                                    *ttagcomplete#FindJavaClassInTags()*
ttagcomplete#FindJavaClassInTags


